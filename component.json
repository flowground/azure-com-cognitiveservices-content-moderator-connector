{
    "title": "Content Moderator Client",
    "description": "You use the API to scan your content as it is generated. Content Moderator then processes your content and sends the results along with relevant information either back to your systems or to the built-in review tool. You can use this information to take decisions e.g. take it down, send to human judge, etc.\r\n\r\nWhen using the API, images need to have a minimum of 128 pixels and a maximum file size of 4MB. \r\nText can be at most 1024 characters long. \r\nIf the content passed to the text API or the image API exceeds the size limits, the API will return an error code that informs about the issue.",
    "docsUrl": "",
    "url": "https://api.apis.guru/v2/specs/azure.com/cognitiveservices-ContentModerator/1.0/swagger.json",
    "envVars": {},
    "credentials": {
        "fields": {
            "server": {
                "label": "Server",
                "viewClass": "SelectView",
                "model": [
                    "https://azure.local/",
                    "{Endpoint}",
                    "--- Custom URL"
                ],
                "required": true
            },
            "otherServer": {
                "label": "Custom Server URL",
                "viewClass": "TextFieldView"
            },
            "apim_key": {
                "label": "Ocp-Apim-Subscription-Key (apim_key)",
                "viewClass": "TextFieldView"
            }
        }
    },
    "triggers": {
        "startFlow": {
            "main": "./lib/triggers/startFlow.js",
            "type": "polling",
            "title": "Start Flow",
            "fields": {}
        }
    },
    "actions": {
        "ListManagementImageLists_GetAllImageLists": {
            "main": "./lib/actions/ListManagementImageLists_GetAllImageLists.js",
            "title": "Gets all the Image Lists.",
            "description": "Gets all the Image Lists.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/ListManagementImageLists_GetAllImageLists.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "ListManagementImageLists_Create": {
            "main": "./lib/actions/ListManagementImageLists_Create.js",
            "title": "Creates an image list.",
            "description": "Creates an image list.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/ListManagementImageLists_Create.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "ListManagementImageLists_Delete": {
            "main": "./lib/actions/ListManagementImageLists_Delete.js",
            "title": "Deletes image list with the list Id equal to list Id passed.",
            "description": "Deletes image list with the list Id equal to list Id passed.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/ListManagementImageLists_Delete.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "ListManagementImageLists_GetDetails": {
            "main": "./lib/actions/ListManagementImageLists_GetDetails.js",
            "title": "Returns the details of the image list with list Id equal to list Id passed.",
            "description": "Returns the details of the image list with list Id equal to list Id passed.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/ListManagementImageLists_GetDetails.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "ListManagementImageLists_Update": {
            "main": "./lib/actions/ListManagementImageLists_Update.js",
            "title": "Updates an image list with list Id equal to list Id passed.",
            "description": "Updates an image list with list Id equal to list Id passed.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/ListManagementImageLists_Update.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "ListManagementImageLists_RefreshIndex": {
            "main": "./lib/actions/ListManagementImageLists_RefreshIndex.js",
            "title": "Refreshes the index of the list with list Id equal to list Id passed.",
            "description": "Refreshes the index of the list with list Id equal to list Id passed.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/ListManagementImageLists_RefreshIndex.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "ListManagementImage_DeleteAllImages": {
            "main": "./lib/actions/ListManagementImage_DeleteAllImages.js",
            "title": "Deletes all images from the list with list Id equal to list Id passed.",
            "description": "Deletes all images from the list with list Id equal to list Id passed.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/ListManagementImage_DeleteAllImages.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "ListManagementImage_GetAllImageIds": {
            "main": "./lib/actions/ListManagementImage_GetAllImageIds.js",
            "title": "Gets all image Ids from the list with list Id equal to list Id passed.",
            "description": "Gets all image Ids from the list with list Id equal to list Id passed.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/ListManagementImage_GetAllImageIds.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "ListManagementImage_AddImage": {
            "main": "./lib/actions/ListManagementImage_AddImage.js",
            "title": "Add an image to the list with list Id equal to list Id passed.",
            "description": "Add an image to the list with list Id equal to list Id passed.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/ListManagementImage_AddImage.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "ListManagementImage_DeleteImage": {
            "main": "./lib/actions/ListManagementImage_DeleteImage.js",
            "title": "Deletes an image from the list with list Id and image Id passed.",
            "description": "Deletes an image from the list with list Id and image Id passed.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/ListManagementImage_DeleteImage.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "ListManagementTermLists_GetAllTermLists": {
            "main": "./lib/actions/ListManagementTermLists_GetAllTermLists.js",
            "title": "gets all the Term Lists",
            "description": "gets all the Term Lists",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/ListManagementTermLists_GetAllTermLists.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "ListManagementTermLists_Create": {
            "main": "./lib/actions/ListManagementTermLists_Create.js",
            "title": "Creates a Term List",
            "description": "Creates a Term List",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/ListManagementTermLists_Create.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "ListManagementTermLists_Delete": {
            "main": "./lib/actions/ListManagementTermLists_Delete.js",
            "title": "Deletes term list with the list Id equal to list Id passed.",
            "description": "Deletes term list with the list Id equal to list Id passed.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/ListManagementTermLists_Delete.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "ListManagementTermLists_GetDetails": {
            "main": "./lib/actions/ListManagementTermLists_GetDetails.js",
            "title": "Returns list Id details of the term list with list Id equal to list Id passed.",
            "description": "Returns list Id details of the term list with list Id equal to list Id passed.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/ListManagementTermLists_GetDetails.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "ListManagementTermLists_Update": {
            "main": "./lib/actions/ListManagementTermLists_Update.js",
            "title": "Updates an Term List.",
            "description": "Updates an Term List.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/ListManagementTermLists_Update.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "ListManagementTermLists_RefreshIndex": {
            "main": "./lib/actions/ListManagementTermLists_RefreshIndex.js",
            "title": "Refreshes the index of the list with list Id equal to list ID passed.",
            "description": "Refreshes the index of the list with list Id equal to list ID passed.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/ListManagementTermLists_RefreshIndex.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "ListManagementTerm_DeleteAllTerms": {
            "main": "./lib/actions/ListManagementTerm_DeleteAllTerms.js",
            "title": "Deletes all terms from the list with list Id equal to the list Id passed.",
            "description": "Deletes all terms from the list with list Id equal to the list Id passed.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/ListManagementTerm_DeleteAllTerms.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "ListManagementTerm_GetAllTerms": {
            "main": "./lib/actions/ListManagementTerm_GetAllTerms.js",
            "title": "Gets all terms from the list with list Id equal to the list Id passed.",
            "description": "Gets all terms from the list with list Id equal to the list Id passed.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/ListManagementTerm_GetAllTerms.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "ListManagementTerm_DeleteTerm": {
            "main": "./lib/actions/ListManagementTerm_DeleteTerm.js",
            "title": "Deletes a term from the list with list Id equal to the list Id passed.",
            "description": "Deletes a term from the list with list Id equal to the list Id passed.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/ListManagementTerm_DeleteTerm.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "ListManagementTerm_AddTerm": {
            "main": "./lib/actions/ListManagementTerm_AddTerm.js",
            "title": "Add a term to the term list with list Id equal to list Id passed.",
            "description": "Add a term to the term list with list Id equal to list Id passed.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/ListManagementTerm_AddTerm.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "ImageModeration_Evaluate": {
            "main": "./lib/actions/ImageModeration_Evaluate.js",
            "title": "Returns probabilities of the image containing racy or adult content.",
            "description": "Returns probabilities of the image containing racy or adult content.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/ImageModeration_Evaluate.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "ImageModeration_FindFaces": {
            "main": "./lib/actions/ImageModeration_FindFaces.js",
            "title": "Returns the list of faces found.",
            "description": "Returns the list of faces found.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/ImageModeration_FindFaces.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "ImageModeration_Match": {
            "main": "./lib/actions/ImageModeration_Match.js",
            "title": "Fuzzily match an image against one of your custom Image Lists. You can create and manage your custom image lists using <a href=\"/docs/services/578ff44d2703741568569ab9/operations/578ff7b12703741568569abe\">this</a> API. \r\n\r\nReturns ID and tags of matching image.<br/>\r\n<br/>\r\nNote: Refresh Index must be run on the corresponding Image List before additions and removals are reflected in the response.",
            "description": "Fuzzily match an image against one of your custom Image Lists. You can create and manage your custom image lists using <a href=\"/docs/services/578ff44d2703741568569ab9/operations/578ff7b12703741568569abe\">this</a> API. \r\n\r\nReturns ID and tags of matching image.<br/>\r\n<br/>\r\nNote: Refresh Index must be run on the corresponding Image List before additions and removals are reflected in the response.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/ImageModeration_Match.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "ImageModeration_OCR": {
            "main": "./lib/actions/ImageModeration_OCR.js",
            "title": "Returns any text found in the image for the language specified. If no language is specified in input then the detection defaults to English.",
            "description": "Returns any text found in the image for the language specified. If no language is specified in input then the detection defaults to English.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/ImageModeration_OCR.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "TextModeration_DetectLanguage": {
            "main": "./lib/actions/TextModeration_DetectLanguage.js",
            "title": "This operation will detect the language of given input content. Returns the <a href=\"http://www-01.sil.org/iso639-3/codes.asp\">ISO 639-3 code</a> for the predominant language comprising the submitted text. Over 110 languages supported.",
            "description": "This operation will detect the language of given input content. Returns the <a href=\"http://www-01.sil.org/iso639-3/codes.asp\">ISO 639-3 code</a> for the predominant language comprising the submitted text. Over 110 languages supported.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                },
                "body_content_type": {
                    "viewClass": "SelectView",
                    "label": "Body Content-Type",
                    "required": true,
                    "prompt": "Choose a body Content-Type.",
                    "model": {
                        "text/plain": "text/plain",
                        "text/html": "text/html",
                        "text/xml": "text/xml",
                        "text/markdown": "text/markdown"
                    }
                }
            },
            "metadata": {
                "in": "./lib/schemas/TextModeration_DetectLanguage.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "TextModeration_ScreenText": {
            "main": "./lib/actions/TextModeration_ScreenText.js",
            "title": "Detect profanity and match against custom and shared blacklists",
            "description": "Detects profanity in more than 100 languages and match against custom and shared blacklists.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                },
                "body_content_type": {
                    "viewClass": "SelectView",
                    "label": "Body Content-Type",
                    "required": true,
                    "prompt": "Choose a body Content-Type.",
                    "model": {
                        "text/plain": "text/plain",
                        "text/html": "text/html",
                        "text/xml": "text/xml",
                        "text/markdown": "text/markdown"
                    }
                }
            },
            "metadata": {
                "in": "./lib/schemas/TextModeration_ScreenText.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "Reviews_CreateJob": {
            "main": "./lib/actions/Reviews_CreateJob.js",
            "title": "A job Id will be returned for the content posted on this endpoint. \r\n\r\nOnce the content is evaluated against the Workflow provided the review will be created or ignored based on the workflow expression.\r\n\r\n<h3>CallBack Schemas </h3>\r\n\r\n<p>\r\n<h4>Job Completion CallBack Sample</h4><br/>\r\n\r\n{<br/>\r\n  \"JobId\": \"<Job Id>,<br/>\r\n  \"ReviewId\": \"<Review Id, if the Job resulted in a Review to be created>\",<br/>\r\n  \"WorkFlowId\": \"default\",<br/>\r\n  \"Status\": \"<This will be one of Complete, InProgress, Error>\",<br/>\r\n  \"ContentType\": \"Image\",<br/>\r\n  \"ContentId\": \"<This is the ContentId that was specified on input>\",<br/>\r\n  \"CallBackType\": \"Job\",<br/>\r\n  \"Metadata\": {<br/>\r\n    \"adultscore\": \"0.xxx\",<br/>\r\n    \"a\": \"False\",<br/>\r\n    \"racyscore\": \"0.xxx\",<br/>\r\n    \"r\": \"True\"<br/>\r\n  }<br/>\r\n}<br/>\r\n\r\n</p>\r\n<p>\r\n<h4>Review Completion CallBack Sample</h4><br/>\r\n\r\n{\r\n  \"ReviewId\": \"<Review Id>\",<br/>\r\n  \"ModifiedOn\": \"2016-10-11T22:36:32.9934851Z\",<br/>\r\n  \"ModifiedBy\": \"<Name of the Reviewer>\",<br/>\r\n  \"CallBackType\": \"Review\",<br/>\r\n  \"ContentId\": \"<The ContentId that was specified input>\",<br/>\r\n  \"Metadata\": {<br/>\r\n    \"adultscore\": \"0.xxx\",\r\n    \"a\": \"False\",<br/>\r\n    \"racyscore\": \"0.xxx\",<br/>\r\n    \"r\": \"True\"<br/>\r\n  },<br/>\r\n  \"ReviewerResultTags\": {<br/>\r\n    \"a\": \"False\",<br/>\r\n    \"r\": \"True\"<br/>\r\n  }<br/>\r\n}<br/>\r\n\r\n</p>.",
            "description": "A job Id will be returned for the content posted on this endpoint. \r\n\r\nOnce the content is evaluated against the Workflow provided the review will be created or ignored based on the workflow expression.\r\n\r\n<h3>CallBack Schemas </h3>\r\n\r\n<p>\r\n<h4>Job Completion CallBack Sample</h4><br/>\r\n\r\n{<br/>\r\n  \"JobId\": \"<Job Id>,<br/>\r\n  \"ReviewId\": \"<Review Id, if the Job resulted in a Review to be created>\",<br/>\r\n  \"WorkFlowId\": \"default\",<br/>\r\n  \"Status\": \"<This will be one of Complete, InProgress, Error>\",<br/>\r\n  \"ContentType\": \"Image\",<br/>\r\n  \"ContentId\": \"<This is the ContentId that was specified on input>\",<br/>\r\n  \"CallBackType\": \"Job\",<br/>\r\n  \"Metadata\": {<br/>\r\n    \"adultscore\": \"0.xxx\",<br/>\r\n    \"a\": \"False\",<br/>\r\n    \"racyscore\": \"0.xxx\",<br/>\r\n    \"r\": \"True\"<br/>\r\n  }<br/>\r\n}<br/>\r\n\r\n</p>\r\n<p>\r\n<h4>Review Completion CallBack Sample</h4><br/>\r\n\r\n{\r\n  \"ReviewId\": \"<Review Id>\",<br/>\r\n  \"ModifiedOn\": \"2016-10-11T22:36:32.9934851Z\",<br/>\r\n  \"ModifiedBy\": \"<Name of the Reviewer>\",<br/>\r\n  \"CallBackType\": \"Review\",<br/>\r\n  \"ContentId\": \"<The ContentId that was specified input>\",<br/>\r\n  \"Metadata\": {<br/>\r\n    \"adultscore\": \"0.xxx\",\r\n    \"a\": \"False\",<br/>\r\n    \"racyscore\": \"0.xxx\",<br/>\r\n    \"r\": \"True\"<br/>\r\n  },<br/>\r\n  \"ReviewerResultTags\": {<br/>\r\n    \"a\": \"False\",<br/>\r\n    \"r\": \"True\"<br/>\r\n  }<br/>\r\n}<br/>\r\n\r\n</p>.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                },
                "body_content_type": {
                    "viewClass": "SelectView",
                    "label": "Body Content-Type",
                    "required": true,
                    "prompt": "Choose a body Content-Type.",
                    "model": {
                        "application/json": "application/json",
                        "image/jpeg": "image/jpeg"
                    }
                }
            },
            "metadata": {
                "in": "./lib/schemas/Reviews_CreateJob.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "Reviews_GetJobDetails": {
            "main": "./lib/actions/Reviews_GetJobDetails.js",
            "title": "Get the Job Details for a Job Id.",
            "description": "Get the Job Details for a Job Id.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/Reviews_GetJobDetails.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "Reviews_CreateReviews": {
            "main": "./lib/actions/Reviews_CreateReviews.js",
            "title": "The reviews created would show up for Reviewers on your team. As Reviewers complete reviewing, results of the Review would be POSTED (i.e. HTTP POST) on the specified CallBackEndpoint.\r\n\r\n<h3>CallBack Schemas </h3>\r\n<h4>Review Completion CallBack Sample</h4>\r\n<p>\r\n{<br/>\r\n  \"ReviewId\": \"<Review Id>\",<br/>\r\n  \"ModifiedOn\": \"2016-10-11T22:36:32.9934851Z\",<br/>\r\n  \"ModifiedBy\": \"<Name of the Reviewer>\",<br/>\r\n  \"CallBackType\": \"Review\",<br/>\r\n  \"ContentId\": \"<The ContentId that was specified input>\",<br/>\r\n  \"Metadata\": {<br/>\r\n    \"adultscore\": \"0.xxx\",<br/>\r\n    \"a\": \"False\",<br/>\r\n    \"racyscore\": \"0.xxx\",<br/>\r\n    \"r\": \"True\"<br/>\r\n  },<br/>\r\n  \"ReviewerResultTags\": {<br/>\r\n    \"a\": \"False\",<br/>\r\n    \"r\": \"True\"<br/>\r\n  }<br/>\r\n}<br/>\r\n\r\n</p>.",
            "description": "The reviews created would show up for Reviewers on your team. As Reviewers complete reviewing, results of the Review would be POSTED (i.e. HTTP POST) on the specified CallBackEndpoint.\r\n\r\n<h3>CallBack Schemas </h3>\r\n<h4>Review Completion CallBack Sample</h4>\r\n<p>\r\n{<br/>\r\n  \"ReviewId\": \"<Review Id>\",<br/>\r\n  \"ModifiedOn\": \"2016-10-11T22:36:32.9934851Z\",<br/>\r\n  \"ModifiedBy\": \"<Name of the Reviewer>\",<br/>\r\n  \"CallBackType\": \"Review\",<br/>\r\n  \"ContentId\": \"<The ContentId that was specified input>\",<br/>\r\n  \"Metadata\": {<br/>\r\n    \"adultscore\": \"0.xxx\",<br/>\r\n    \"a\": \"False\",<br/>\r\n    \"racyscore\": \"0.xxx\",<br/>\r\n    \"r\": \"True\"<br/>\r\n  },<br/>\r\n  \"ReviewerResultTags\": {<br/>\r\n    \"a\": \"False\",<br/>\r\n    \"r\": \"True\"<br/>\r\n  }<br/>\r\n}<br/>\r\n\r\n</p>.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/Reviews_CreateReviews.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "Reviews_GetReview": {
            "main": "./lib/actions/Reviews_GetReview.js",
            "title": "Returns review details for the review Id passed.",
            "description": "Returns review details for the review Id passed.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/Reviews_GetReview.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "Reviews_GetVideoFrames": {
            "main": "./lib/actions/Reviews_GetVideoFrames.js",
            "title": "The reviews created would show up for Reviewers on your team. As Reviewers complete reviewing, results of the Review would be POSTED (i.e. HTTP POST) on the specified CallBackEndpoint.\r\n\r\n<h3>CallBack Schemas </h3>\r\n<h4>Review Completion CallBack Sample</h4>\r\n<p>\r\n{<br/>\r\n  \"ReviewId\": \"<Review Id>\",<br/>\r\n  \"ModifiedOn\": \"2016-10-11T22:36:32.9934851Z\",<br/>\r\n  \"ModifiedBy\": \"<Name of the Reviewer>\",<br/>\r\n  \"CallBackType\": \"Review\",<br/>\r\n  \"ContentId\": \"<The ContentId that was specified input>\",<br/>\r\n  \"Metadata\": {<br/>\r\n    \"adultscore\": \"0.xxx\",<br/>\r\n    \"a\": \"False\",<br/>\r\n    \"racyscore\": \"0.xxx\",<br/>\r\n    \"r\": \"True\"<br/>\r\n  },<br/>\r\n  \"ReviewerResultTags\": {<br/>\r\n    \"a\": \"False\",<br/>\r\n    \"r\": \"True\"<br/>\r\n  }<br/>\r\n}<br/>\r\n\r\n</p>.",
            "description": "The reviews created would show up for Reviewers on your team. As Reviewers complete reviewing, results of the Review would be POSTED (i.e. HTTP POST) on the specified CallBackEndpoint.\r\n\r\n<h3>CallBack Schemas </h3>\r\n<h4>Review Completion CallBack Sample</h4>\r\n<p>\r\n{<br/>\r\n  \"ReviewId\": \"<Review Id>\",<br/>\r\n  \"ModifiedOn\": \"2016-10-11T22:36:32.9934851Z\",<br/>\r\n  \"ModifiedBy\": \"<Name of the Reviewer>\",<br/>\r\n  \"CallBackType\": \"Review\",<br/>\r\n  \"ContentId\": \"<The ContentId that was specified input>\",<br/>\r\n  \"Metadata\": {<br/>\r\n    \"adultscore\": \"0.xxx\",<br/>\r\n    \"a\": \"False\",<br/>\r\n    \"racyscore\": \"0.xxx\",<br/>\r\n    \"r\": \"True\"<br/>\r\n  },<br/>\r\n  \"ReviewerResultTags\": {<br/>\r\n    \"a\": \"False\",<br/>\r\n    \"r\": \"True\"<br/>\r\n  }<br/>\r\n}<br/>\r\n\r\n</p>.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/Reviews_GetVideoFrames.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "Reviews_AddVideoFrame": {
            "main": "./lib/actions/Reviews_AddVideoFrame.js",
            "title": "The reviews created would show up for Reviewers on your team. As Reviewers complete reviewing, results of the Review would be POSTED (i.e. HTTP POST) on the specified CallBackEndpoint.\r\n\r\n<h3>CallBack Schemas </h3>\r\n<h4>Review Completion CallBack Sample</h4>\r\n<p>\r\n{<br/>\r\n  \"ReviewId\": \"<Review Id>\",<br/>\r\n  \"ModifiedOn\": \"2016-10-11T22:36:32.9934851Z\",<br/>\r\n  \"ModifiedBy\": \"<Name of the Reviewer>\",<br/>\r\n  \"CallBackType\": \"Review\",<br/>\r\n  \"ContentId\": \"<The ContentId that was specified input>\",<br/>\r\n  \"Metadata\": {<br/>\r\n    \"adultscore\": \"0.xxx\",<br/>\r\n    \"a\": \"False\",<br/>\r\n    \"racyscore\": \"0.xxx\",<br/>\r\n    \"r\": \"True\"<br/>\r\n  },<br/>\r\n  \"ReviewerResultTags\": {<br/>\r\n    \"a\": \"False\",<br/>\r\n    \"r\": \"True\"<br/>\r\n  }<br/>\r\n}<br/>\r\n\r\n</p>.",
            "description": "The reviews created would show up for Reviewers on your team. As Reviewers complete reviewing, results of the Review would be POSTED (i.e. HTTP POST) on the specified CallBackEndpoint.\r\n\r\n<h3>CallBack Schemas </h3>\r\n<h4>Review Completion CallBack Sample</h4>\r\n<p>\r\n{<br/>\r\n  \"ReviewId\": \"<Review Id>\",<br/>\r\n  \"ModifiedOn\": \"2016-10-11T22:36:32.9934851Z\",<br/>\r\n  \"ModifiedBy\": \"<Name of the Reviewer>\",<br/>\r\n  \"CallBackType\": \"Review\",<br/>\r\n  \"ContentId\": \"<The ContentId that was specified input>\",<br/>\r\n  \"Metadata\": {<br/>\r\n    \"adultscore\": \"0.xxx\",<br/>\r\n    \"a\": \"False\",<br/>\r\n    \"racyscore\": \"0.xxx\",<br/>\r\n    \"r\": \"True\"<br/>\r\n  },<br/>\r\n  \"ReviewerResultTags\": {<br/>\r\n    \"a\": \"False\",<br/>\r\n    \"r\": \"True\"<br/>\r\n  }<br/>\r\n}<br/>\r\n\r\n</p>.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/Reviews_AddVideoFrame.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "Reviews_PublishVideoReview": {
            "main": "./lib/actions/Reviews_PublishVideoReview.js",
            "title": "Publish video review to make it available for review.",
            "description": "Publish video review to make it available for review.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/Reviews_PublishVideoReview.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "Reviews_AddVideoTranscript": {
            "main": "./lib/actions/Reviews_AddVideoTranscript.js",
            "title": "This API adds a transcript file (text version of all the words spoken in a video) to a video review. The file should be a valid WebVTT format.",
            "description": "This API adds a transcript file (text version of all the words spoken in a video) to a video review. The file should be a valid WebVTT format.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/Reviews_AddVideoTranscript.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "Reviews_AddVideoTranscriptModerationResult": {
            "main": "./lib/actions/Reviews_AddVideoTranscriptModerationResult.js",
            "title": "This API adds a transcript screen text result file for a video review. Transcript screen text result file is a result of Screen Text API . In order to generate transcript screen text result file , a transcript file has to be screened for profanity using Screen Text API.",
            "description": "This API adds a transcript screen text result file for a video review. Transcript screen text result file is a result of Screen Text API . In order to generate transcript screen text result file , a transcript file has to be screened for profanity using Screen Text API.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/Reviews_AddVideoTranscriptModerationResult.in.json",
                "out": {
                    "type": "object"
                }
            }
        }
    }
}